-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, [stack, state, world], program) {
  case program of
    BINOP (op)  : tail -> 
        case stack of
          right : left : stackTail -> 
             eval (env, [evalOp (op, left, right) : stackTail, state, world], tail) 
        esac

  | CONST (n)   : tail -> 
        eval (env, [n : stack, state, world], tail)

  | READ        : tail -> 
        case readWorld (world) of
          [val, world] ->
            eval (env, [val : stack, state, world], tail)
        esac

  | WRITE       : tail ->
        case stack of
          top : stackTail -> 
              eval (env, [stackTail, state, writeWorld (top, world)], tail)
        esac

  | LD (x)      : tail ->
        eval (env, [state (x) : stack, state, world], tail)

  | ST (x)      : tail ->
        case stack of 
          top : _ ->
              eval (env, [stack, state <- [x, top], world], tail)
        esac 
  | LABEL (l)   : tail -> eval (env, [stack, state, world], tail)
  | JMP (l)     : tail -> 
        eval (env, [stack, state, world], fromLabel (env, l))
  | CJMP ("nz", l) : tail ->
        case stack of
          0 : stackTail -> eval (env, [stackTail, state, world], tail)
        | _ : stackTail -> eval (env, [stackTail, state, world], fromLabel (env, l))
        esac
  | CJMP ("z", l)  : tail -> 
        case stack of
          0 : stackTail -> eval (env, [stackTail, state, world], fromLabel (env, l))
        | _ : stackTail -> eval (env, [stackTail, state, world], tail)
        esac
  | LDA (x) : tail   -> eval (env, [Ref (x) : stack, state, world], tail)
  | STI            : tail -> 
        case stack of 
          v : Ref (x) : stackTail -> 
            eval (env, [v : stackTail, state <- [x, v], world], tail)
        esac
  | DROP           : tail ->
        case stack of
          _ : stackTail -> eval (env, [stackTail, state, world], tail)
        esac
  | _                -> [stack, state, world]
  esac 
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles a statement into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
    fun compile (env, stmt) {
      case stmt of
        Binop (op, l, r) -> case compile (env, l) of
                              [env, prog1] ->
                                case compile (env, r) of
                                  [env, prog2] -> [env, { prog1, prog2, BINOP (op) }]
                                esac
                            esac
      | Const (n)      -> [env, singleton (CONST (n))]
      | Var (x)        -> [env, singleton (LD (x))]
      | Read (x)       -> [env, { READ, ST (x), DROP }]
      | Write (x)      -> case compile (env, x) of
                            [env, prog] -> [env, { prog, WRITE }]
                          esac
      | Seq (x1, x2)   -> case compile (env, x1) of 
                              [env1, prog1] ->
                                  case compile (env1, x2) of 
                                      [env2, prog2] -> [env2, { prog1, prog2 }]
                                  esac
                          esac
      | Assn (x, e)    -> case compile (env, x) of
                            [env, prog1] ->
                               case compile (env, e) of
                                 [env, prog2] -> [env, { prog1, prog2, STI }]
                               esac
                          esac
      | While (e, s)   -> case genLabels (env, 2) of
                              [lCond, lLoop, env] ->
                                  case compile (env, s) of
                                      [env, prog] -> 
                                        case compile (env, e) of
                                          [env, cond] ->
                                                [env, { 
                                                    JMP (lCond), 
                                                    LABEL (lLoop), 
                                                    prog, 
                                                    LABEL (lCond), 
                                                    cond, 
                                                    CJMP ("nz", lLoop) }]
                                        esac
                                  esac
                          esac
      | Repeat (s, e)  -> case genLabel (env) of
                            [lLoop, env] -> 
                                case compile (env, s) of 
                                    [env, prog] -> 
                                      case compile (env, e) of
                                        [env, cond] -> [env, { 
                                                            LABEL (lLoop), 
                                                            prog,
                                                            cond, 
                                                            CJMP ("z", lLoop) }] 
                                      esac
                                esac
                          esac
      | If (e, s1, s2) -> case genLabels (env, 2) of
                              [lElse, lEnd, env] -> 
                                  case compile (env, s1) of
                                      [env, prog1] -> 
                                          case compile (env, s2) of
                                              [env, prog2] -> 
                                                case compile (env, e) of
                                                  [env, cond] -> [env, { 
                                                        cond, 
                                                        CJMP ("nz", lElse), 
                                                        prog2,
                                                        JMP (lEnd),
                                                        LABEL (lElse), 
                                                        prog1,
                                                        LABEL (lEnd) }]
                                                esac
                                          esac
                                  esac
                          esac
      | Ref (x)        -> [env, singleton (LDA (x))]
      | Ignore (x)     -> case compile (env, x) of
                            [env, p] -> [env, {p, DROP}]
                          esac
      | Skip           -> [env, { }]
      esac 
    }

    deepFlatten((compile(initCompEnv(), stmt))[1])
}
